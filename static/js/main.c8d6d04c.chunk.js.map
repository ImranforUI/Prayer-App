{"version":3,"sources":["redux/users/users.actions.js","redux/users/users.actionTypes.js","components/Popup.js","components/Assignment2.js","redux/users/users.reducer.js","components/counter.js","App.js","serviceWorker.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["getAllData","dispatch","a","type","Axios","get","response","payload","data","console","error","Popup","useState","isOpen","setIsOpen","closeModal","className","onClick","appear","show","as","Fragment","onClose","Child","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","Overlay","aria-hidden","Title","Assignment2","useDispatch","name","email","count","prayerType","duaDescription","user","setUser","handleInput","e","target","value","useEffect","method","onSubmit","undefined","alert","log","config","headers","dataUrl","post","registerUser","openModal","required","onChange","placeholder","rows","initialState","loading","errorMessage","Count","props","userInfo","useSelector","state","ayatAlKursi","filter","prayer","surahalYaseen","surahAlikhlas","totalPrayer","length","App","href","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","middleWares","logger","thunk","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.c8d6d04c.chunk.js","sourcesContent":["import {\r\n    FETCH_PRAYER_FAILURE,\r\n    FETCH_PRAYER_REQUEST, FETCH_PRAYER_SUCCESS,\r\n    REGISTER_USER_FAILURE,\r\n    REGISTER_USER_REQUEST,\r\n    REGISTER_USER_SUCCESS\r\n} from \"./users.actionTypes\";\r\nimport Axios from \"axios\";\r\n\r\nlet serverUrl = `http://13.233.4.38:5000`;\r\n// let serverUrl = `http://localhost:5000`;\r\n\r\n// Register User\r\nlet registerUser = (user) => {\r\n  return async (dispatch) => {\r\n    let config = {\r\n      headers : {\r\n        'Content-Type' : 'application/json'\r\n      }\r\n    } \r\n        try {\r\n            dispatch({ type : REGISTER_USER_REQUEST});\r\n            let dataUrl = `${serverUrl}/users/register`;\r\n            let response = await Axios.post(dataUrl , user, config);\r\n            dispatch({ type : REGISTER_USER_SUCCESS , payload : response.data});\r\n\r\n        }\r\n        catch (error) {\r\n            console.error(error);\r\n            dispatch({ type : REGISTER_USER_FAILURE , payload : error});\r\n        }\r\n  };\r\n};\r\n\r\n// Get All user data\r\nlet getAllData = () => {\r\n  return async (dispatch) => {\r\n      try {\r\n          dispatch({type : FETCH_PRAYER_REQUEST});\r\n          let response = await Axios.get(`${serverUrl}/users/`);\r\n          dispatch({type : FETCH_PRAYER_SUCCESS , payload : response.data});\r\n      }\r\n      catch (error) {\r\n        console.error(error);\r\n        dispatch({type : FETCH_PRAYER_FAILURE , payload : error});\r\n      }\r\n  }\r\n};\r\n\r\nexport {registerUser, getAllData};","// Register\r\nexport const REGISTER_USER_REQUEST = 'REGISTER_USER_REQUEST';\r\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\r\nexport const REGISTER_USER_FAILURE = 'REGISTER_USER_FAILURE';\r\n\r\n// Prayer\r\nexport const FETCH_PRAYER_REQUEST = 'FETCH_PRAYER_REQUEST';\r\nexport const FETCH_PRAYER_SUCCESS = 'FETCH_PRAYER_SUCCESS';\r\nexport const FETCH_PRAYER_FAILURE = 'FETCH_PRAYER_FAILURE';","import { Dialog, Transition } from '@headlessui/react'\r\nimport { Fragment, useState } from 'react'\r\nimport React from 'react';\r\n\r\nexport default function Popup() {\r\n  let [isOpen, setIsOpen] = useState(true)\r\n\r\n  function closeModal() {\r\n    setIsOpen(false)\r\n  }\r\n\r\n  function openModal() {\r\n    setIsOpen(true)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"fixed inset-0 flex items-center justify-center\">\r\n        <button\r\n          type=\"button\"\r\n          onClick={openModal}\r\n          className=\"px-4 py-2 text-sm font-medium text-white bg-black rounded-md bg-opacity-20 hover:bg-opacity-30 focus:outline-none focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75\"\r\n        >\r\n          Open dialog\r\n        </button>\r\n      </div>\r\n\r\n      <Transition appear show={isOpen} as={Fragment}>\r\n        <Dialog\r\n          as=\"div\"\r\n          className=\"fixed inset-0 z-10 overflow-y-auto\"\r\n          onClose={closeModal}\r\n        >\r\n          <div className=\"min-h-screen px-4 text-center\">\r\n            <Transition.Child\r\n              as={Fragment}\r\n              enter=\"ease-out duration-300\"\r\n              enterFrom=\"opacity-0\"\r\n              enterTo=\"opacity-100\"\r\n              leave=\"ease-in duration-200\"\r\n              leaveFrom=\"opacity-100\"\r\n              leaveTo=\"opacity-0\"\r\n            >\r\n              <Dialog.Overlay className=\"fixed inset-0\" />\r\n            </Transition.Child>\r\n\r\n            {/* This element is to trick the browser into centering the modal contents. */}\r\n            <span\r\n              className=\"inline-block h-screen align-middle\"\r\n              aria-hidden=\"true\"\r\n            >\r\n              &#8203;\r\n            </span>\r\n            <Transition.Child\r\n              as={Fragment}\r\n              enter=\"ease-out duration-300\"\r\n              enterFrom=\"opacity-0 scale-95\"\r\n              enterTo=\"opacity-100 scale-100\"\r\n              leave=\"ease-in duration-200\"\r\n              leaveFrom=\"opacity-100 scale-100\"\r\n              leaveTo=\"opacity-0 scale-95\"\r\n            >\r\n              <div className=\"inline-block w-full max-w-md p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-2xl\">\r\n                <Dialog.Title\r\n                  as=\"h3\"\r\n                  className=\"text-lg font-medium leading-6 text-gray-900\"\r\n                >\r\n                  Payment successful\r\n                </Dialog.Title>\r\n                <div className=\"mt-2\">\r\n                  <p className=\"text-sm text-gray-500\">\r\n                    Your payment has been successfully submitted. We’ve sent\r\n                    your an email with all of the details of your order.\r\n                  </p>\r\n                </div>\r\n\r\n                <div className=\"mt-4\">\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"inline-flex justify-center px-4 py-2 text-sm font-medium text-blue-900 bg-blue-100 border border-transparent rounded-md hover:bg-blue-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-blue-500\"\r\n                    onClick={closeModal}\r\n                  >\r\n                    Got it, thanks!\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </Transition.Child>\r\n          </div>\r\n        </Dialog>\r\n      </Transition>\r\n    </>\r\n  )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {getAllData, registerUser} from \"../redux/users/users.actions\";\r\nimport Popup from './Popup';\r\n\r\n\r\nlet Assignment2 = () => {\r\n    // const [platformValue, plaftormInputProps] = useRadioButtons(\"platform\");\r\n    let dispatch = useDispatch();\r\n\r\n    let [user, setUser] = useState({\r\n        name: 'Ahle Khair',\r\n        email: '',\r\n        count: 1000,\r\n        prayerType: null,\r\n        duaDescription: 'يرحمها الله'\r\n\r\n    });\r\n\r\n    // handleInput\r\n    let handleInput = (e) => {\r\n        setUser({\r\n            ...user,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    };\r\n\r\n    // counterChange\r\n    let counterChange = () => {\r\n        setUser({\r\n            ...user,\r\n            count: user.count > 0 ? user.count - 1 : null\r\n        })\r\n    };\r\n\r\n    // submitUser\r\n    let submitUser = (e) => {\r\n        if(user.prayerType === \"\" || user.prayerType === undefined){\r\n            alert('Please Select Atlest one Prayer Type  ---براہ کرم ایک تلاوت منتخب کریں');\r\n          }\r\n          else{      \r\n        counterChange();\r\n        console.log(user);\r\n        dispatch(registerUser(user)); \r\n        alert(`Thank You ${user.name}`);\r\n        Popup.openModal();\r\n        dispatch(getAllData());\r\n          }\r\n    };\r\n\r\n    useEffect(() =>{\r\n        dispatch(getAllData());\r\n    }, [dispatch]);\r\n\r\n    // function useRadioButtons(name) {\r\n    //     const [value, setState] = useState(null);\r\n\r\n    //     const handleChange = e => {\r\n    //         setState(e.target.value);\r\n    //     };\r\n\r\n    //     const inputProps = {\r\n    //         name,\r\n    //         type: \"radio\",\r\n    //         onChange: handleChange\r\n    //     };\r\n\r\n    //     return [value, inputProps];\r\n    // }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"container mt-3\">\r\n                <div className=\"row \">\r\n\r\n                    <div className=\"col-md-9 \">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-header bg-success text-white\">\r\n                                <p className=\"h4\">Special Prayer for maghfirat of my Mother(مسرت آسما)</p>\r\n                                <p className=\"h6\">میری والدہ کی مغفرت کے لئے خصوصی دعا اور تلاوت..مسرت آسما\r\n                        </p>\r\n                                <p className=\"h7\">Target Date  : 9 June 2021 (9 جون )</p>\r\n                            </div>\r\n\r\n                            <div className=\"card-body bg-light\">\r\n                                <form method=\"post\" onSubmit={submitUser}>\r\n                                    <div className=\"form-group\">\r\n                                        <label>Name</label>\r\n                                        <input required\r\n                                            name='name'\r\n                                            // value={user.name ? user.name : \"Ahle khair\"}\r\n                                            value={user.name}\r\n                                            onChange={handleInput}\r\n                                            type=\"text\" className='form-control' placeholder='Ahle khair' />\r\n                                    </div>\r\n                                    <label>Email</label>\r\n                                    <div className=\"form-group\">\r\n                                        <input\r\n                                           required\r\n                                            name='email'\r\n                                            value={user.email}\r\n                                            onChange={handleInput}\r\n                                            type=\"email\" className='form-control' placeholder='Email for future challanges' />\r\n                                    </div>\r\n                                    {/* <p onChange={counterChange}  className=\"h5\">Counter : {user.count}</p> */}\r\n\r\n\r\n                                    <div className=\"form-group\">\r\n                                        <label>Praying (Tilawat)</label>\r\n                                        <fieldset>\r\n                                            <p>Surah Al Yaseen   يس\r\n          <input \r\n                                                    value=\"Surah Al Yaseen\"\r\n                                            onChange={handleInput}\r\n                                            type = \"radio\"\r\n                                            name = \"prayerType\"\r\n                                                    // checked={platformValue === \"Yaseen\"}\r\n                                                    // {...plaftormInputProps}\r\n                                                /></p>\r\n\r\n                                            <br />\r\n                                            <p > Ayat Al Kursi آية الكرسي\r\n          <input \r\n                                                    value=\"Ayat Al Kursi\"\r\n                                            onChange={handleInput}\r\n                                            type = \"radio\"\r\n                                            name=\"prayerType\"\r\n                                                    // checked={platformValue === \"alKursi\"}\r\n                                                    // {...plaftormInputProps}\r\n                                                /></p>\r\n\r\n                                            <br />\r\n                                            <p>\r\n                                                Surah Al Ikhlas   الإخلاص\r\n          <input\r\n                                                    value=\"Surah Al Ikhlas\"\r\n                                            onChange={handleInput}\r\n                                            type = \"radio\"\r\n                                            name=\"prayerType\"\r\n                                                    // checked={platformValue === \"ikhlas\"}\r\n                                                    // {...plaftormInputProps}\r\n                                                />\r\n\r\n                                            </p>\r\n\r\n                                        </fieldset>\r\n\r\n                                        {/* <select required\r\n                                              name='prayerType'\r\n                                              value={user.prayerType}\r\n                                              onChange={handleInput}\r\n                                              className=\"form-control\">\r\n                                          <option>Select Prayer</option>\r\n                                          <option value=\"MASHAALLAH\">Masha Allah</option>\r\n                                          <option value=\"ALHUMDULILLAH\">ALhumdulillah</option>\r\n                                          <option value=\"JAZAKALLAH\">Jazak Allah</option>\r\n                                      </select> */}\r\n                                    </div>\r\n                                    <div className=\"form-group mt-3\">\r\n                                        <textarea\r\n                                            required\r\n                                            name='duaDescription'\r\n                                            value={user.duaDescription}\r\n                                            onChange={handleInput}\r\n                                            rows=\"4\" className=\"form-control\" placeholder=\"Dua اَلدُّعَاءُ‎\" />\r\n                                    </div>\r\n                                    <div className='form-group'>\r\n                                        <input type=\"submit\" className='btn btn-sm btn-success' value=\"Submit\" />\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n};\r\nexport default Assignment2;","import {\r\n    FETCH_PRAYER_FAILURE,\r\n    FETCH_PRAYER_REQUEST, FETCH_PRAYER_SUCCESS,\r\n    REGISTER_USER_FAILURE,\r\n    REGISTER_USER_REQUEST,\r\n    REGISTER_USER_SUCCESS\r\n} from \"./users.actionTypes\";\r\n\r\nexport const USERS_FEATURE_KEY = 'user';\r\n\r\nlet initialState = {\r\n  loading : false,\r\n  errorMessage : '',\r\n  user : []\r\n};\r\n\r\nlet usersReducer = (state = initialState , action) => {\r\n  let {type , payload} = action;\r\n  switch(type) {\r\n      // Register a User\r\n      case REGISTER_USER_REQUEST:\r\n          return{\r\n              ...state,\r\n              loading: true\r\n          };\r\n      case REGISTER_USER_SUCCESS:\r\n          return {\r\n              ...state,\r\n              loading: false,\r\n              user : payload\r\n          };\r\n      case REGISTER_USER_FAILURE:\r\n          return {\r\n              ...state,\r\n              loading: false,\r\n              errorMessage: payload\r\n          };\r\n\r\n        // Get All User\r\n      case FETCH_PRAYER_REQUEST:\r\n          return{\r\n              ...state,\r\n              loading: true\r\n          };\r\n      case FETCH_PRAYER_SUCCESS:\r\n          return {\r\n              ...state,\r\n              loading: false,\r\n              user : payload\r\n          };\r\n      case FETCH_PRAYER_FAILURE:\r\n          return {\r\n              ...state,\r\n              loading: false,\r\n              errorMessage: payload\r\n          };\r\n      default : return state;\r\n  }\r\n};\r\n\r\nexport {usersReducer};","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { USERS_FEATURE_KEY } from '../redux/users/users.reducer';\r\n\r\n//styling\r\n//import './Count.css';\r\n\r\nconst Count = props => {\r\n  // let dispatch = useDispatch();\r\n  let userInfo = useSelector((state) => {\r\n     return state[USERS_FEATURE_KEY].user;\r\n  });\r\n\r\n\r\n  let ayatAlKursi = userInfo.filter((prayer) => {\r\n      return prayer.prayerType === \"Ayat Al Kursi\";\r\n  });\r\n\r\n  let surahalYaseen = userInfo.filter((prayer) => {\r\n      return prayer.prayerType === \"Surah Al Yaseen\";\r\n  });\r\n\r\n  let surahAlikhlas = userInfo.filter((prayer) => {\r\n      return prayer.prayerType === \"Surah Al Ikhlas\";\r\n  });\r\n\r\n  let totalPrayer = ayatAlKursi.length + surahAlikhlas.length + surahalYaseen.length;\r\n  \r\n  // label of counter\r\n  // number to increment to\r\n  // duration of count in seconds\r\n  // const {name, number, duration } = props.data\r\n\r\n  // number displayed by component\r\n  // const [count, setCount] = useState(\"0\");\r\n\r\n  // useEffect(() => {\r\n  //   let start = 0;\r\n    // first three numbers from props\r\n    // const end = parseInt(number.substring(0,3))\r\n    // if zero, return\r\n    // if (start === end) return;\r\n\r\n    // find duration per increment\r\n    // let totalMilSecDur = parseInt(duration);\r\n    // let incrementTime = (totalMilSecDur / end) * 1000;\r\n\r\n    // timer increments start counter \r\n    // then updates count\r\n    // ends if start reaches end\r\n    // let timer = setInterval(() => {\r\n    //   start += 1;\r\n    //   setCount(String(start) + number.substring(3))\r\n    //   if (start === end) clearInterval(timer)       \r\n    // }, incrementTime);\r\n\r\n    // dependency array\r\n  // }, [number, duration]);\r\n\r\n  return (\r\n   <React.Fragment>\r\n      <div className=\"Count\">\r\n      <p>\r\n        {/* <i>{name} : {count}</i> */}\r\n        <i> يس Surah Al Yaseen : {surahalYaseen.length} </i>\r\n      </p>\r\n   \r\n    </div>\r\n    <div className=\"Count\">\r\n      <h6>\r\n        {/* <i>{name} : {count}</i> */}\r\n        <i>آية الكرسي Ayat Al Kursi : {ayatAlKursi.length}</i>\r\n      </h6>\r\n   \r\n    </div>\r\n    <div className=\"Count\">\r\n      <h6>\r\n        {/* <i>{name} : {count}</i> */}\r\n        <i>الإخلاص Surah Al Ikhlas : {surahAlikhlas.length}</i>\r\n      </h6>\r\n   \r\n    </div>\r\n    <div className=\"Count\">\r\n      <h6>\r\n        {/* <i>{name} : {count}</i> */}\r\n        <i>Total Prayers : {totalPrayer}</i>\r\n      </h6>\r\n   \r\n    </div>\r\n   </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Count;","import React from 'react';\nimport './App.css';\nimport Assignment2 from \"./components/Assignment2\";\n// import data from './data/data.json';\n\n//components\nimport Count from './components/counter';\n\n\nlet App = () => {\n    return (\n        <React.Fragment>\n        <nav className=\"navbar sticky-top navbar-light bg-light\">\n        <a className=\"navbar-brand\" href=\"/\">Special DUA  Request (خصوصی دعا کی درخواست)</a>\n      </nav>\n                  <div className=\"fluid-container\">\n                  <div className=\"row\">\n                  <div className=\"col-md-4 col-lg-4 col-sm-4\" >\n                  {/* {data.counts.map(count => <Count key={count.id} data={count}/>)} */}\n                  <Count/>\n                  </div>\n                  <div className=\"col-md-8 col-lg-8 col-sm-8\">\n                  <Assignment2/>\n                  </div>\n                  </div>\n                  </div>\n              </React.Fragment>\n    )\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from \"redux\";\r\nimport {USERS_FEATURE_KEY, usersReducer} from \"./users/users.reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    [USERS_FEATURE_KEY] : usersReducer,\r\n});\r\n\r\nexport {rootReducer};","import {applyMiddleware, createStore} from \"redux\";\r\nimport {rootReducer} from \"./rootReducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport logger from 'redux-logger';\r\nimport thunk from \"redux-thunk\";\r\n\r\nlet middleWares = [logger , thunk];\r\n\r\nlet store = createStore(rootReducer , composeWithDevTools(applyMiddleware(...middleWares)));\r\nexport {store};","// MDBootstrap css files\n\nimport 'mdbootstrap/css/bootstrap.css';\nimport 'mdbootstrap/css/mdb.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n   <Provider store={store}>\n       <App />\n   </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}